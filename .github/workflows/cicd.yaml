name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/my-app
  KUBE_NAMESPACE: default

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  deploy-to-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Minikube and kubectl
      run: |
        sudo apt-get update -q
        sudo apt-get install -qy conntrack
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube version
        sudo apt-get install -y kubectl
        
    - name: Start Minikube cluster
      run: |
        minikube start --driver=docker --force --cpus=2 --memory=4000mb
        minikube status
        kubectl cluster-info
        
    - name: Configure registry access
      run: |
        # Авторизация Minikube в GHCR
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GHCR_TOKEN }} \
          --namespace=${{ env.KUBE_NAMESPACE }} || true
        
    - name: Deploy to Minikube
      run: |
        # Подставляем актуальный образ в deployment.yaml
        sed -i "s|ghcr.io/.*/my-app:latest|${{ env.DOCKER_IMAGE }}:${{ github.sha }}|g" kubernetes/deployment.yaml
        
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml
        
        # Увеличиваем timeout и добавляем debug информацию
        kubectl rollout status deployment/my-flask-app --timeout=300s
        kubectl describe deployment/my-flask-app
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        kubectl logs -l app=my-flask-app -n ${{ env.KUBE_NAMESPACE }}
